--[[
    Author: xixi_
    Date: 2024-10-27 09:22:41
    LastEditors: xixi_
    LastEditTime: 2024-11-05 19:46:34
    FilePath: /FHMF/src/Modules/xixi/src/2048Gen/2048Gen.lua
    Copyright (c) 2020-2024 by xixi_ , All Rights Reserved.
--]]
--[[
更新日志 :
    2020-04-11 20:54    发布第一个版本
    2020-10-09 20:38    发布第二个版本,优化了一些细节
    2022-07-32  12:45    改成UI版本
    2024-10-27 09:22:41 优化核心,移动四合一,引用快速索引,大幅减少循环次数。
    2024-10-29 20:15:59 快速索引数组现可通过 `QuickIndexArr()` 方法生成。
    2024-11-03 22:10:25 修复双重合并漏洞,移除了随机刷新加分功能。
    2024-11-45 11:45:14 发布最终版本 - Gen Version
    2024-11-05 19:19:16 升级为Core版
    2024-11-20 15:34:26 完善了C API
]]
--[[
    2048 一维数组版,解释一下什么是Gen版本,Gen版本是指经过精简,旨在用最少的循环实现业务逻辑,同时保持一定的可读性。
    全网最精简的算法,经过极致优化,采用索引数组,与常规写法（需要实现四个移动函数）相比,
    去掉了繁琐的逻辑,仅需三个核心函数、一个辅助函数和一个主函数,合计仅需五个循环
    即可实现完整的 2048 游戏。祝你玩得愉快ヾ(•ω•`)o
]]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
math.randomseed(os.time()); --[[ 随机数种子 ]]
local Score = 0; --[[ 得分 ]]
local lbrt = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, --[[ 左 ]] 13, 9, 5, 1, 14, 10, 6, 2, 15, 11, 7,
    3, 16, 12, 8, 4, --[[ 下 ]] 4, 3, 2, 1, 8, 7, 6, 5, 12, 11, 10, 9, 16, 15, 14, 13, --[[ 右 ]] 1, 5, 9,
    13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 --[[ 上 ]] }; --[[ 四方向快速索引数组,仅适用于`4*4`尺寸]]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function XIXI_2048GenPrint1DTable(Grid, Size)
    for i = 1, #Grid do
        io.write((Grid[i] ~= 0 and Grid[i] or ".") .. ((i % Size == 0) and "\n" or "   ")); --[[ 每Size个数字换行 ]]
    end
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--[[
  在2048网格中随机添加数字
  `Grid`: 当前2048网格的状态
]]
local function XIXI_2048GenAddRandomNum(Grid)
    local EmptyIndices = { 0 }; --[[ 存储空格(0)的索引 ]]
    local EmptyCount = 0; --[[ 记录空格数量 ]]
    for i = 1, 16, 1 do --[[ 收集所有值为0的索引 ]]
        if (Grid[i] == 0) then
            EmptyCount = EmptyCount + 1
            EmptyIndices[EmptyCount] = i; --[[ 如果是0,推入索引 ]]
        end
    end
    if (#EmptyIndices > 0) then --[[ 如果存在空位置 ]]
        local SelectedIndex = EmptyIndices[math.random(1, #EmptyIndices)]; --[[ 随机选择一个空位置 ]]
        --[[ 生成随机数,并根据其大小更新位置 ]]
        Grid[SelectedIndex] = ((math.random(0, 10) < 3) and 4 or 2); --[[ 70%几率生成2,30%几率生成4 ]]
    end
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--[[ 三大队 ]]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--[[
  合并相同数字
  `Tiles`: 当前需要合并的数字数组
  `NewTiles`: 合并后的数字数组
  返回是否可以移动的标志
]]
local function XIXI_2048GenCombineTiles(Tiles, NewTiles)
    local Index = 1; --[[ 用于跟踪新表中的下一个插入位置 ]]
    local CanMove = false;
    local MergedMark = { false, false, false, false }; --[[ 标记是否已经合并 ]]
    for i = 1, 4, 1 do
        if (Tiles[i] ~= 0) then --[[ 如果当前格子不为空 ]]
            if (Index > 1 and NewTiles[Index - 1] == Tiles[i] and not MergedMark[Index - 1]) then
                NewTiles[Index - 1] = NewTiles[Index - 1] * 2; --[[ 合并数字 ]]
                Score = Score + NewTiles[Index - 1]; --[[ 更新分数 ]]
                MergedMark[Index - 1] = true; --[[ 标记已合并 ]]
                CanMove = true; --[[ 标记可移动 ]]
            else
                NewTiles[Index] = Tiles[i]; --[[ 将当前数字放入新表 ]]
                Index = Index + 1; --[[ 移动到下一个插入的位置 ]]
            end
        else
            CanMove = true; --[[ 发现0值,标记可移动 ]]
        end
    end
    return CanMove; --[[ 返回移动标志 ]]
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--[[
  处理2048游戏中移动
  `Grid`: 当前2048网格
  `Direction`: 移动方向（`0`: `左`, `1`: `下`, `2`: `右`, `3`: `上`）
]]
local function XIXI_2048GenMove(Grid, Direction)
    local HasMoved = false; --[[ 标记是否发生过移动 ]]
    for i = 1, 4, 1 do
        local Index = Direction * 16 + i * 4; --[[ 计算当前处理的方块组的起始索引 ]]
        --[[ 获取当前方块组 ]]
        local Tiles = { Grid[lbrt[Index - 3]], Grid[lbrt[Index - 2]], Grid[lbrt[Index - 1]], Grid[lbrt[Index]] };
        local NewTiles = { 0, 0, 0, 0 }; --[[ 初始化新表 ]]
        local CanMove = XIXI_2048GenCombineTiles(Tiles, NewTiles); --[[ 合并方块并获取新状态 ]]
        if (CanMove) then --[[ 如果可以移动或合并 ]]
            for j = 1, 4 do
                Grid[lbrt[Index + j - 4]] = NewTiles[j]; --[[ 更新网格中的方块 ]]
            end
            HasMoved = true; --[[ 标记发生过移动 ]]
        end
    end
    if (not HasMoved) then
        print("无法移动哦~"); --[[ 当前方向无法移动 ]]
    else
        XIXI_2048GenAddRandomNum(Grid); --[[ 可移动,随机刷新 ]]
    end
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function main()
    local Grid = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; --[[ 初始化 ]]
    XIXI_2048GenAddRandomNum(Grid); --[[ 随机刷新 ]]
    while (true) do
        -- os.execute("clear");
        XIXI_2048GenPrint1DTable(Grid, 4);
        print("\n分数:", Score);
        io.write("请输入移动方向:上(W) 下(S) 左(A) 右(D) 退出(Q) >> ");
        local Input = io.read():lower(); --[[ 获取输入 ]]
        if (Input == "q" or Input == "exit") then break; end
        local Direction = ({ w = 3, a = 0, s = 1, d = 2 })[Input];
        if (Direction ~= nil) then
            XIXI_2048GenMove(Grid, Direction); --[[ 移动 ]]
        end
    end
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
main() --[[ 启动游戏 ]]
